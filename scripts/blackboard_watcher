#!/usr/bin/env python
#
# License: Yujin
#
#
##############################################################################
# Documentation
##############################################################################
"""
Simple utility to watch and display items from Blackboard
"""
##############################################################################
# Imports
##############################################################################

import argparse
import functools
import py_trees_msgs.srv as py_trees_srvs
import rospy
import rocon_console.console as console
import rosservice
import sys
import std_msgs.msg as std_msgs


##############################################################################
# Command Handler
##############################################################################


def show_usage():
    s = "\n"
    s += console.bold + "    Introspection" + console.reset + "\n\n"
    s += console.cyan + "        blackboard_watcher" + console.yellow + " [option]" + console.reset + "\n"
    s += "\n"
    s += " " * 12 + "where " + console.yellow + "[option]" + console.reset + " is one of:\n\n"
    s += console.cyan + " " * 12 + "-l, --list_variables         " + console.yellow + "list variables in the blackboard." + console.reset + "\n"
    s += console.cyan + " " * 12 + "-n, --namespace              " + console.yellow + "namespace of blackboard services." + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Command" + console.reset + "\n\n"
    s += console.cyan + "        blackboard_watcher" + console.yellow + " <variables>" + console.reset + "\n"
    s += "\n"
    s += " " * 12 + "where " + console.yellow + "<variables>" + console.reset + " is a space separated list of blackboard variables\n"
    s += "\n"
    s += console.bold + "    Example" + console.reset + "\n\n"
    s += console.cyan + "        blackboard_watcher" + console.yellow + " access_point odom/pose/pose/position" + console.reset + "\n"
    s += "\n"
    return s


def show_description():
    s = ""
    s += console.green + "Watch and log the blackboard!" + console.reset
    return s


def parse_arguments(command_line_args):
    parser = argparse.ArgumentParser(description=show_description(),
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.RawTextHelpFormatter
                                     )
    parser.add_argument('-l', '--list_variables', action='store_true', default=None, help='list variables in the blackboard.')
    parser.add_argument('-n', '--namespace', nargs='?', default=None, help='namespace of blackboard services.')
    parser.add_argument('variables', nargs=argparse.REMAINDER, default=None, help='list of blackboard variables')

    args = parser.parse_args(command_line_args)
    return args


def pretty_print_variables(variables):
    s = "\n"
    s += console.bold + console.cyan + "Blackboard Variables:" + console.reset + console.yellow + "\n"
    for variable in variables:
        variable = variable.split('/')
        if len(variable) > 1:
            sep = "/"
        else:
            sep = ""
        s += "    " * len(variable) + sep + variable[-1] + "\n"
    s += console.reset
    print "%s" % s


def echo_sub_blackboard(sub_blackboard):
    print "%s" % sub_blackboard.data


def spin_ros_node(received_topic):
    rospy.init_node(received_topic.topic.split('/')[-1])

    destroy_blackboard_watcher_service_name = find_service(args.namespace, 'py_trees_msgs/DestroyBlackboardWatcher')

    def request_blackboard_watcher_destruction(updates_subscriber):
        """
        :param rospy.Subscriber updates_subscriber: subscriber to unregister
        """
        updates_subscriber.unregister()
        try:
            rospy.wait_for_service(destroy_blackboard_watcher_service_name, timeout=3.0)
            try:
                shutdown_sub_blackboard = rospy.ServiceProxy(destroy_blackboard_watcher_service_name, py_trees_srvs.DestroyBlackboardWatcher)
                unused_result = shutdown_sub_blackboard(received_topic.topic.split('/')[-1])
                # could check if result returned success
            except rospy.ServiceException, e:
                    print(console.red + "ERROR: service call failed [%s]" % str(e) + console.reset)
                    sys.exit(1)
        except rospy.exceptions.ROSException, e:
            print(console.red + "ERROR: unknown ros exception [%s]" % str(e) + console.reset)
            sys.exit(1)

    updates_subscriber = rospy.Subscriber(received_topic.topic, std_msgs.String, echo_sub_blackboard)
    rospy.on_shutdown(functools.partial(request_blackboard_watcher_destruction, updates_subscriber))
    while not rospy.is_shutdown():
        rospy.spin()


def find_service(namespace, service_type):
    """
    Will either exit or return the name of the service requested for.

    :param string namespace: optional namespace lookup helper
    :param string service_type: ros service type
    :returns service_name
    """
    service_name = rosservice.rosservice_find(service_type)
    if len(service_name) > 0:
        if len(service_name) == 1:
            service_name = service_name[0]
        elif namespace is not None:
            for service in service_name:
                if namespace in service:
                    service_name = service
                    break
            if type(service_name) is list:
                print(console.red + "\nERROR: multiple blackboard services found %s" % service_name + console.reset)
                print(console.red + "\nERROR: but none matching the requested '%s'" % namespace + console.reset)
                sys.exit(1)
        else:
            print(console.red + "\nERROR: multiple blackboard services found %s" % service_name + console.reset)
            print(console.red + "\nERROR: select one with the --namespace argument" + console.reset)
            sys.exit(1)
    else:
        print(console.red + "ERROR: blackboard services not found" + console.reset)
        sys.exit(1)
    return service_name


def handle_args(args):
    if args.list_variables:
        list_variables_service_name = find_service(args.namespace, 'py_trees_msgs/BlackboardVariables')
        try:
            rospy.wait_for_service(list_variables_service_name, timeout=3.0)
            try:
                list_variables = rospy.ServiceProxy(list_variables_service_name, py_trees_srvs.BlackboardVariables)
                recieved_variables = list_variables()
                pretty_print_variables(recieved_variables.variables)
            except rospy.ServiceException, e:
                print(console.red + "ERROR: service call failed [%s]" % str(e) + console.reset)
                sys.exit(1)
        except rospy.exceptions.ROSException, e:
            print(console.red + "ERROR: unknown ros exception [%s]" % str(e) + console.reset)
            sys.exit(1)
    else:
        if not args.variables:
            print(console.red + "\nERROR: please provide a list of variables to watch.\n" + console.reset)
            print(console.bold + console.yellow + "  Usage" + console.reset)
            print("%s" % show_usage())
            sys.exit(1)
        else:
            variables = args.variables[0:]
            variables = [variable.strip(',[]') for variable in variables]

            spawn_blackboard_watcher_service = find_service(args.namespace, 'py_trees_msgs/SpawnBlackboardWatcher')

            try:
                rospy.wait_for_service(spawn_blackboard_watcher_service, timeout=3.0)
                try:
                    sub_blackboard_watch_service_call = rospy.ServiceProxy(spawn_blackboard_watcher_service, py_trees_srvs.SpawnBlackboardWatcher)
                    received_topic = sub_blackboard_watch_service_call(variables)
                except rospy.ServiceException, e:
                    print(console.red + "ERROR: service call failed [%s]" % str(e) + console.reset)
                    sys.exit(1)

                if received_topic is not None:
                    spin_ros_node(received_topic)

                else:
                    print(console.red + "\nERROR: subscribing to topic failed\n" + console.reset)
            except rospy.exceptions.ROSException, e:
                print(console.red + "ERROR: unknown ros exception [%s]" % str(e) + console.reset)
                sys.exit(1)


##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    args = parse_arguments(command_line_args)
    handle_args(args)
